{"version":3,"sources":["services/phonebookdata.js","components.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","console","log","delete","FilterForm","newFilter","filterData","value","onChange","PersonForm","newName","newNumber","changeName","changeNumber","addPerson","type","onClick","Persons","filtered","action","map","person","key","name","number","Person","Notification","errorOccured","message","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","setErrorOccured","notification","setNotification","notificationTimeOut","setTimeout","useEffect","PbDataService","initialList","updateNumber","updatedData","p","catch","error","event","target","preventDefault","newPerson","existingName","find","toLowerCase","window","confirm","newInformation","addedPerson","concat","filter","includes","newList","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3414c629.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request=axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteItem = id => {\n    console.log(`${baseUrl}/${id}`)\n    const request=axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, create, update, deleteItem}","import React from 'react'\n\nconst FilterForm = ({newFilter, filterData}) => {\n    return(\n    <div>\n      <div>\n        <label>filter shown with: </label>\n        <input value={newFilter} onChange={filterData}/></div>\n    </div>\n    ) \n  }\n  \n  const PersonForm = ({newName, newNumber, changeName, changeNumber, addPerson}) => {\n    return(\n      <form>\n        <div>\n          name: <input value={newName} onChange={changeName}/>\n        </div>\n        <div>number: <input value={newNumber} onChange={changeNumber}/></div>\n        <div>\n          <button type=\"submit\" onClick={addPerson}>add</button>\n        </div>\n      </form>\n    )\n  }\n  \n  const Persons = ({filtered, action}) => filtered.map((person) => \n  <Person key={person.name} name={person.name} \n  number={person.number} id={person.id} action={action}/>)\n  \n  const Person = ({name, number, id, action}) => {\n  return (\n    <div>\n      {name} {number} <></>\n      <button onClick={() => action(id, name)}>delete</button>\n      </div>\n  )\n  }\n\n  const Notification = ({errorOccured, message}) => {\n\n    if (message === null) return null\n  \n    const color = errorOccured ? 'red' : 'green'\n    const style = {\n      color: color,\n      background: 'lightgrey',\n      fontSize: 20,\n      borderStyle: 'solid',\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10\n    }\n    return (\n      <div style={style}>\n        <em>{message}</em>\n      </div>\n    )\n  }\n\n  export {FilterForm, PersonForm, Persons, Notification}\n","//2.20* puhelinluettelo\n\nimport React, { useState,useEffect } from 'react'\nimport PbDataService from './services/phonebookdata'\nimport {FilterForm, PersonForm, Persons, Notification} from './components'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber ] = useState('')\n  const [newFilter, setNewFilter ] = useState('')\n  const [errorOccured, setErrorOccured] = useState(true)\n  const [notification, setNotification] = useState(null)\n\n  const notificationTimeOut = () => {\n    setTimeout(() => {\n    setNotification(null)\n    setNewName('')\n    setNewNumber('')\n  }, 4000)\n}\n  // Get phonebook from server\n  useEffect(() => {\n    PbDataService.getAll()\n    .then(initialList => {\n      setPersons(initialList)\n    })\n  },[])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = event => {\n    setNewFilter(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const newPerson = { name: newName, number: newNumber }   \n    const existingName = persons.find(person => person.name.toLowerCase()\n     === newName.toLowerCase())\n\n    if (existingName) {\n      const confirmUpdate = window.confirm(`${newName} is already added to phonebook. Do you want\n      to replace the old number with a new one?`)\n      // Update number information\n      if (confirmUpdate) {\n        const newInformation = {...existingName, number: newNumber}\n        updateNumber(newInformation)\n      }\n    }\n    else {\n      // Add new person to server\n      PbDataService.create(newPerson)\n      .then(addedPerson => {\n        setPersons(persons.concat(addedPerson))\n        setNotification(`Added ${newName}`)\n        setErrorOccured(false)\n      })\n      .catch(error => {\n       setNotification(`Adding ${newName} failed`)\n       setErrorOccured(true)\n      })\n      notificationTimeOut()\n    }\n  }\n\n  const updateNumber = person => {\n    PbDataService.update(person.id, person)\n    .then(updatedData => {\n      setPersons(persons.map((p) => p.id !== person.id ? p : updatedData))\n       setNotification(`Updated ${newName}'s number`)\n       setErrorOccured(false)\n    })\n    .catch(error => {\n       setNotification(`${person.name} was already removed from server`)\n       setErrorOccured(true)\n      })\n    notificationTimeOut()\n  }\n\n  const deletePerson = (id, name) => {\n    const confirmDelete = window.confirm(`Delete ${name} ?`)\n    // Delete person from server\n    if (confirmDelete) {\n      const newList = persons.filter((person) => person.id !== id)\n      PbDataService.deleteItem(id)\n      .then(() => {\n        setPersons(newList)\n       setNotification(`Deleted ${name}`)\n       setErrorOccured(false)\n      })\n      .catch(error => {\n       setNotification(`Deleting ${name} failed`)\n       setErrorOccured(true)\n      })\n      notificationTimeOut()\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification errorOccured={errorOccured} message={notification} />\n\n      <FilterForm newFilter={newFilter} filterData={handleFilterChange} />\n\n      <h2>Add a new</h2>\n      <PersonForm newName={newName} newNumber={newNumber} changeName={handleNameChange} \n      changeNumber={handleNumberChange} addPerson={addPerson}/>\n\n      <h2>Numbers</h2>\n      <Persons filtered={newFilter === '' ? persons : \n      persons.filter((person) => \n      person.name.toLowerCase().includes(newFilter.toLowerCase()))}\n      action={deletePerson}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}